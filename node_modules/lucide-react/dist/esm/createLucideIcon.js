
/**
 * @license lucide-react v0.395.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

import { forwardRef } from 'react';
import defaultAttributes from './defaultAttributes.js';
import { toKebabCase } from './utils/toKebabCase.js';
import { mergeClasses } from './utils/mergeClasses.js';

/**
 * @deprecated
 * The APLv2 license is deprecated and will be removed in v1.0.0.
 * See the LICENSE file in the root directory of this source tree for more information.
 * If you are using Lucide for commercial purposes, please consider supporting the project by sponsoring it.
 */
const createLucideIcon = (iconName, iconNode) => {
  const Component = forwardRef(
    ({ color = "currentColor", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = "", children, ...rest }, ref) => {
      const customAttrs = {
        ...defaultAttributes,
        width: size,
        height: size,
        stroke: color,
        "stroke-width": absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        class: mergeClasses(`lucide lucide-${toKebabCase(iconName)}`, className)
      };
      return (
        // The `iconNode` is a list of all the svg nodes for the icon.
        // It's created by the build process from the original svg files.
        // The node is a list of tuples, where the first element is the tag name and the second is the attributes.
        // The attributes are a list of tuples, where the first element is the attribute name and the second is the attribute value.
        // The value can be a string or a number.
        // The value can be a string or a number.
        //
        // The structure of the iconNode is:
        // [
        //   [ 'circle', { cx: '12', cy: '12', r: '10' } ],
        //   [ 'line', { x1: '12', y1: '8', x2: '12', y2: '16' } ],
        //   [ 'line', { x1: '8', y1: '12', x2: '16', y2: '12' } ]
        // ]
        //
        // This is then rendered as:
        // <svg>
        //   <circle cx="12" cy="12" r="10" />
        //   <line x1="12" y1="8" x2="12" y2="16" />
        //   <line x1="8" y1="12" x2="16" y2="12" />
        // </svg>
        //
        // The `React.createElement` function is used to create the svg element.
        // The first argument is the tag name, the second is the attributes, and the rest are the children.
        // The children are created by mapping over the iconNode and creating a `React.createElement` for each node.
        //
        // The `...rest` is used to pass any other props to the svg element.
        // This is useful for passing `aria-` attributes, for example.
        //
        // The `ref` is passed to the svg element so that it can be accessed by the parent component.
        // This is useful for getting the svg element's `width` and `height`, for example.
        //
        // The `children` are rendered inside the svg element.
        // This is useful for adding a `title` element, for example.
        // <Icon>
        //   <title>My icon</title>
        // </Icon>
        //
        // The `displayName` is set to the icon name so that it's easier to debug.
        // For example, in the React DevTools, it will show up as `Icon (Activity)`.
        //
        // The `defaultProps` are set to the default values for the props.
        // This is useful for making the icon easier to use.
        // For example, you don't have to pass the `size` prop every time you use the icon.
        //
        // The `propTypes` are set to the types of the props.
        // This is useful for catching errors during development.
        // For example, if you pass a string to the `size` prop, it will throw an error.
        //
        // The `toKebabCase` function is used to convert the icon name to kebab case.
        // For example, `Activity` becomes `activity`.
        // This is used for the class name of the svg element.
        // For example, the class name will be `lucide lucide-activity`.
        //
        // The `mergeClasses` function is used to merge the class names.
        // For example, if you pass `className="my-class"` to the icon,
        // the class name will be `lucide lucide-activity my-class`.
        //
        // The `defaultAttributes` are the default attributes for the svg element.
        // This is useful for making the icon easier to use.
        // For example, you don't have to pass the `xmlns` prop every time you use the icon.
        //
        // The `absoluteStrokeWidth` is a boolean that determines whether the stroke width should be absolute or relative.
        // If it's true, the stroke width will be `strokeWidth * 24 / size`.
        // This is useful for making the stroke width consistent across different sizes of the icon.
        // For example, if you have a 12px icon and a 24px icon, the stroke width will be the same.
        //
        // The `color` is the color of the icon.
        // The `size` is the size of the icon.
        // The `strokeWidth` is the width of the stroke.
        //
        // The `...rest` is used to pass any other props to the svg element.
        // This is useful for passing `aria-` attributes, for example.
        //
        // The `ref` is passed to the svg element so that it can be accessed by the parent component.
        // This is useful for getting the svg element's `width` and `height`, for example.
        //
        // The `children` are rendered inside the svg element.
        // This is useful for adding a `title` element, for example.
        // <Icon>
        //   <title>My icon</title>
        // </Icon>
        React.createElement(
          "svg",
          {
            ref,
            ...customAttrs,
            ...rest
          },
          [
            ...iconNode.map(([tag, attrs]) => React.createElement(tag, attrs)),
            ...Array.isArray(children) ? children : [children]
          ]
        )
      );
    }
  );
  Component.displayName = `${iconName}`;
  return Component;
};

export { createLucideIcon as default };
